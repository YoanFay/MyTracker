{% extends 'base.html.twig' %}

{% block body %}

    <div class="d-flex flex-row col-12">
        <div class="chart-container col-5">
            <div>
                <canvas id="myChart"></canvas>
            </div>
        </div>
    </div>

    <div class="d-flex flex-row col-12">
        <div class="chart-container col-5">
            <div>
                <canvas id="myChart2"></canvas>
            </div>
        </div>

        <div class="chart-container col-7">
            <div>
                <canvas id="myChart3"></canvas>
            </div>
        </div>
    </div>

    <div class="d-flex flex-row col-12">
        <div class="chart-container col-5">
            <div>
                <canvas id="myChart4"></canvas>
            </div>
        </div>

        <div class="chart-container col-7">
            <div>
                <canvas id="myChart5"></canvas>
            </div>
        </div>
    </div>

{% endblock %}

{% block javascript %}

<script>

    // Fonction pour convertir les secondes en format "hh:mm"
    function toHHMM(milliseconds) {
    const seconds = Math.floor(milliseconds / 1000);
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h${minutes}min`;
}

    // Fonction pour convertir les secondes en format "hh:mm"
    function toHH(milliseconds) {
    const seconds = Math.floor(milliseconds / 1000);
    const hours = Math.floor(seconds / 3600);
    return `${hours}h`;
}
    const ctx = document.getElementById('myChart');

    new Chart(ctx, {
    type: 'pie',
    data: {
    labels: ['Anime', 'Série', 'Replay', 'Film'],
    datasets: [{
    label: 'Temps de visionnage',
    data: {{ timeChart }},
    borderWidth: 1,
      backgroundColor: [
          'rgb(255, 99, 132)',
          'rgb(255, 159, 64)',
          'rgb(255, 205, 86)',
          'rgb(54, 162, 235)',
      ]
      }]
    },
    options: {
      plugins: {
        tooltip: {
          callbacks: {
            label: function (context) {
              const value = context.parsed;
              return `Temps de visionnage : ${toHHMM(value)}`;
            }
          }
        }
      }
    }
  });
  
  const ctx2 = document.getElementById('myChart2');

  new Chart(ctx2, {
    type: 'bar',
    data: {
      labels: ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'],
      datasets: [{
        label: 'Anime',
        data: {{ animeByDayChart }},
        backgroundColor: 'rgb(255, 99, 132)',
        borderColor: 'rgb(255, 99, 132)',
        borderWidth: 1
      },{
        label: 'Série',
        data: {{ serieByDayChart }},
        backgroundColor: 'rgb(255, 159, 64)',
        borderColor: 'rgb(255, 159, 64)',
        borderWidth: 1
      },{
        label: 'Replay',
        data: {{ replayByDayChart }},
        backgroundColor: 'rgb(255, 205, 86)',
        borderColor: 'rgb(255, 205, 86)',
        borderWidth: 1
      },{
        label: 'Film',
        data: {{ movieByDayChart }},
        backgroundColor: 'rgb(54, 162, 235)',
        borderColor: 'rgb(54, 162, 235)',
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          stacked: true,
          ticks: {
              stepSize: 1800000,
              callback: function(value) {
              return toHHMM(value);
            }
          }
        },
        x: {
          stacked: true,
        }
      },
      plugins: {
        tooltip: {
          callbacks: {
            label: function (context) {
                const value = context.parsed.y;
                const datasetLabel = context.dataset.label || '';
                return `${datasetLabel}: ${toHHMM(value)}`;
            }
          }
        }
      }
    }
  });
  
  const ctx3 = document.getElementById('myChart3');

  new Chart(ctx3, {
    type: 'line',
    data: {
      labels: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Aout', 'Septembre', 'Octobre', 'Novembre', 'Décembre'],
      datasets: [{
        label: 'Anime',
        data: {{ animeByMonthChart }},
        backgroundColor: 'rgb(255, 99, 132)',
        borderColor: 'rgb(255, 99, 132)',
        borderWidth: 1
      },{
        label: 'Série',
        data: {{ serieByMonthChart }},
        backgroundColor: 'rgb(255, 159, 64)',
        borderColor: 'rgb(255, 159, 64)',
        borderWidth: 1
      },{
        label: 'Replay',
        data: {{ replayByMonthChart }},
        backgroundColor: 'rgb(255, 205, 86)',
        borderColor: 'rgb(255, 205, 86)',
        borderWidth: 1
      },{
        label: 'Film',
        data: {{ movieByMonthChart }},
        backgroundColor: 'rgb(54, 162, 235)',
        borderColor: 'rgb(54, 162, 235)',
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          stacked: false,
          ticks: {
              stepSize: 18000000,
              callback: function(value) {
              return toHH(value);
            }
          }
        },
        x: {
          stacked: true,
        }
      },
      plugins: {
        tooltip: {
          callbacks: {
            label: function (context) {
                const value = context.parsed.y;
                const datasetLabel = context.dataset.label || '';
                return `${datasetLabel}: ${toHHMM(value)}`;
            }
          }
        }
      }
    }
  });
  
    const ctx4 = document.getElementById('myChart4');

    new Chart(ctx4, {
    type: 'pie',
    data: {
    labels: {{ labelGenreChart | raw }},
    datasets: [{
    label: 'Temps de visionnage',
    data: {{ genreChart }},
    borderWidth: 1
      }]
    },
    options: {
      plugins: {
        tooltip: {
          callbacks: {
            label: function (context) {
              const value = context.parsed;
              return `Temps de visionnage : ${toHHMM(value)}`;
            }
          }
        }
      }
    }
  });
  
    const ctx5 = document.getElementById('myChart5');

    new Chart(ctx5, {
    type: 'pie',
    data: {
    labels: {{ labelThemeChart | raw }},
    datasets: [{
    label: 'Temps de visionnage',
    data: {{ themeChart }},
    borderWidth: 1
      }]
    },
    options: {
      plugins: {
        tooltip: {
          callbacks: {
            label: function (context) {
              const value = context.parsed;
              return `Temps de visionnage : ${toHHMM(value)}`;
            }
          }
        }
      }
    }
  });
</script>

{% endblock %}

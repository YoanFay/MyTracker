{% extends 'base.html.twig' %}

{% block body %}

<div class="d-flex flex-row">
<div class="chart-container" style="position: relative; height:20vh; width:30vw">
    <div>
        <canvas id="myChart"></canvas>
    </div>
</div>

<div class="chart-container" style="position: relative; height:20vh; width:30vw">
    <div>
        <canvas id="myChart2"></canvas>
    </div>
</div>
</div>

{% endblock %}

{% block javascript %}

<script>
  const ctx = document.getElementById('myChart');

  // Fonction pour convertir les secondes en format "hh:mm"
  function toHHMM(milliseconds) {
    const seconds = Math.floor(milliseconds / 1000);
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h${minutes}min`;
  }

  new Chart(ctx, {
    type: 'pie',
    data: {
      labels: ['Film', 'Anime', 'SÃ©rie', 'Replay'],
      datasets: [{
        label: 'Temps de visionnage',
        data: {{ timeChart }},
        borderWidth: 1
      }]
    },
    options: {
      plugins: {
        tooltip: {
          callbacks: {
            label: function (context) {
              const value = context.parsed;
              return `Temps de visionnage : ${toHHMM(value)}`;
            }
          }
        }
      }
    }
  });
  
  const ctx2 = document.getElementById('myChart2');

  new Chart(ctx2, {
    type: 'bar',
    data: {
      labels: ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'],
      datasets: [{
        label: 'Temps de visionnage',
        data: {{ timeByDayChart }},
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
              stepSize: 1800000,
              callback: function(value, index, values) {
              return toHHMM(value);
            }
          }
        }
      },
      plugins: {
        tooltip: {
          callbacks: {
            label: function (context) {
              const value = context.parsed.y;
              return `Temps de visionnage : ${toHHMM(value)}`;
            }
          }
        }
      }
    }
  });
</script>

{% endblock %}
